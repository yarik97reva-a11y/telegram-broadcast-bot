import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

from database import Database
from scheduler import BroadcastScheduler
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(BROADCAST_TITLE, BROADCAST_TEXT, BROADCAST_CHATS,
 BROADCAST_TIME, BROADCAST_FREQUENCY, BROADCAST_REPEAT,
 BROADCAST_GENDER, BROADCAST_AGE_MIN, BROADCAST_AGE_MAX,
 ADD_CHAT_ID, ADD_CHAT_NAME,
 REGISTER_GENDER, REGISTER_AGE,
 ADD_ADMIN_ID) = range(14)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
db = Database(config.DATABASE_PATH)
scheduler = None


def admin_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not db.is_admin(user_id):
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
            )
            return ConversationHandler.END
        return await func(update, context)
    return wrapper


def owner_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not db.is_owner(user_id):
            if update.callback_query:
                await update.callback_query.answer(
                    "‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ!",
                    show_alert=True
                )
            else:
                await update.message.reply_text(
                    "‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ!"
                )
            return ConversationHandler.END
        return await func(update, context)
    return wrapper


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    username = update.effective_user.username

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ –∫–∞–∫ owner (–≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
    if user_id == config.FIRST_ADMIN_ID and not db.is_admin(user_id):
        db.add_admin(user_id, username, role='owner')
        logger.info(f"Added first admin (owner): {user_id}")

    if not db.is_admin(user_id):
        await update.message.reply_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
        )
        return

    await show_main_menu(update, context)


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    user_id = update.effective_user.id
    is_owner = db.is_owner(user_id)

    keyboard = [
        [InlineKeyboardButton("üì§ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="create_broadcast")],
        [InlineKeyboardButton("üìã –ú–æ–∏ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="list_broadcasts")],
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏", callback_data="manage_chats")],
    ]

    # –ö–Ω–æ–ø–∫–∞ "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã" –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if is_owner:
        keyboard.append([InlineKeyboardButton("üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", callback_data="manage_admins")])

    keyboard.extend([
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")],
        [InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="user_stats")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        "ü§ñ <b>–ë–æ—Ç –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )

    if update.callback_query:
        await update.callback_query.message.edit_text(
            text, reply_markup=reply_markup, parse_mode="HTML"
        )
    else:
        await update.message.reply_text(
            text, reply_markup=reply_markup, parse_mode="HTML"
        )


# === –°–û–ó–î–ê–ù–ò–ï –†–ê–°–°–´–õ–ö–ò ===
@admin_only
async def create_broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()

    await query.message.reply_text(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–®–∞–≥ 1/6: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ (–¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞):",
        parse_mode="HTML"
    )
    return BROADCAST_TITLE


async def broadcast_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    context.user_data['broadcast_title'] = update.message.text

    await update.message.reply_text(
        "–®–∞–≥ 2/6: –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
        "<b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <code>–∫–æ–¥</code>"
    )
    return BROADCAST_TEXT


async def broadcast_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    context.user_data['broadcast_text'] = update.message.text

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã
    chats = db.get_target_chats(active_only=True)
    if not chats:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —á–∞—Ç—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏'."
        )
        return ConversationHandler.END

    keyboard = []
    for chat in chats:
        keyboard.append([
            InlineKeyboardButton(
                f"‚úÖ {chat['chat_name']}",
                callback_data=f"toggle_chat_{chat['chat_id']}"
            )
        ])
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="chats_selected")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    context.user_data['selected_chats'] = [chat['chat_id'] for chat in chats]

    await update.message.reply_text(
        "–®–∞–≥ 3/6: –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
        "(–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —á–∞—Ç, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –µ–≥–æ –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏)",
        reply_markup=reply_markup
    )
    return BROADCAST_CHATS


async def toggle_chat_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞"""
    query = update.callback_query
    await query.answer()

    chat_id = query.data.replace("toggle_chat_", "")
    selected = context.user_data.get('selected_chats', [])

    if chat_id in selected:
        selected.remove(chat_id)
        status = "‚ùå"
    else:
        selected.append(chat_id)
        status = "‚úÖ"

    context.user_data['selected_chats'] = selected

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    chats = db.get_target_chats(active_only=True)
    keyboard = []
    for chat in chats:
        mark = "‚úÖ" if chat['chat_id'] in selected else "‚ùå"
        keyboard.append([
            InlineKeyboardButton(
                f"{mark} {chat['chat_name']}",
                callback_data=f"toggle_chat_{chat['chat_id']}"
            )
        ])
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="chats_selected")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_reply_markup(reply_markup=reply_markup)
    return BROADCAST_CHATS


async def chats_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤"""
    query = update.callback_query
    await query.answer()

    if not context.user_data.get('selected_chats'):
        await query.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —á–∞—Ç!")
        return BROADCAST_CHATS

    keyboard = [
        [InlineKeyboardButton("‚è∞ –ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç", callback_data="time_5min")],
        [InlineKeyboardButton("üïê –ß–µ—Ä–µ–∑ 1 —á–∞—Å", callback_data="time_1hour")],
        [InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞ –≤ —ç—Ç–æ –≤—Ä–µ–º—è", callback_data="time_tomorrow")],
        [InlineKeyboardButton("‚úèÔ∏è –£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –≤—Ä—É—á–Ω—É—é", callback_data="time_custom")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(
        "–®–∞–≥ 4/6: –ö–æ–≥–¥–∞ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",
        reply_markup=reply_markup
    )
    return BROADCAST_TIME


async def broadcast_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()

    time_option = query.data.replace("time_", "")
    now = datetime.now()

    if time_option == "5min":
        scheduled_time = now + timedelta(minutes=5)
    elif time_option == "1hour":
        scheduled_time = now + timedelta(hours=1)
    elif time_option == "tomorrow":
        scheduled_time = now + timedelta(days=1)
    elif time_option == "custom":
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</code>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>25.12.2024 15:30</code>",
            parse_mode="HTML"
        )
        return BROADCAST_TIME

    context.user_data['scheduled_time'] = scheduled_time

    keyboard = [
        [InlineKeyboardButton("1Ô∏è‚É£ –û–¥–∏–Ω —Ä–∞–∑", callback_data="freq_once")],
        [InlineKeyboardButton("‚è∞ –ö–∞–∂–¥—ã–π —á–∞—Å", callback_data="freq_hourly")],
        [InlineKeyboardButton("üìÖ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data="freq_daily")],
        [InlineKeyboardButton("üìÜ –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é", callback_data="freq_weekly")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(
        f"‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {scheduled_time.strftime('%d.%m.%Y %H:%M')}\n\n"
        "–®–∞–≥ 5/6: –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=reply_markup
    )
    return BROADCAST_FREQUENCY


async def broadcast_time_custom(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        time_str = update.message.text
        scheduled_time = datetime.strptime(time_str, "%d.%m.%Y %H:%M")

        if scheduled_time < datetime.now():
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –í–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è."
            )
            return BROADCAST_TIME

        context.user_data['scheduled_time'] = scheduled_time

        keyboard = [
            [InlineKeyboardButton("1Ô∏è‚É£ –û–¥–∏–Ω —Ä–∞–∑", callback_data="freq_once")],
            [InlineKeyboardButton("‚è∞ –ö–∞–∂–¥—ã–π —á–∞—Å", callback_data="freq_hourly")],
            [InlineKeyboardButton("üìÖ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data="freq_daily")],
            [InlineKeyboardButton("üìÜ –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é", callback_data="freq_weekly")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {scheduled_time.strftime('%d.%m.%Y %H:%M')}\n\n"
            "–®–∞–≥ 5/6: –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=reply_markup
        )
        return BROADCAST_FREQUENCY

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "<code>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</code>",
            parse_mode="HTML"
        )
        return BROADCAST_TIME


async def broadcast_frequency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å—Ç–æ—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()

    freq_map = {
        "freq_once": "once",
        "freq_hourly": "hourly",
        "freq_daily": "daily",
        "freq_weekly": "weekly"
    }
    frequency = freq_map[query.data]
    context.user_data['frequency'] = frequency

    if frequency == "once":
        context.user_data['repeat_count'] = 1
    else:
        await query.message.reply_text(
            "–®–∞–≥ 6: –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5)"
        )
        return BROADCAST_REPEAT

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
    await ask_gender_filter(update, context)
    return BROADCAST_GENDER


async def broadcast_repeat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤"""
    try:
        repeat_count = int(update.message.text)
        if repeat_count < 1:
            raise ValueError

        context.user_data['repeat_count'] = repeat_count

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
        await ask_gender_filter(update, context)
        return BROADCAST_GENDER

    except ValueError:
        await update.message.reply_text(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–±–æ–ª—å—à–µ 0)"
        )
        return BROADCAST_REPEAT


async def ask_gender_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –ø–æ–ª—É"""
    keyboard = [
        [InlineKeyboardButton("üë• –í—Å–µ–º", callback_data="gender_all")],
        [InlineKeyboardButton("üë® –¢–æ–ª—å–∫–æ –º—É–∂—á–∏–Ω–∞–º", callback_data="gender_male")],
        [InlineKeyboardButton("üë© –¢–æ–ª—å–∫–æ –∂–µ–Ω—â–∏–Ω–∞–º", callback_data="gender_female")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = "–®–∞–≥ 7: –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É\n\n–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?"

    if update.callback_query:
        await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)


async def broadcast_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    query = update.callback_query
    await query.answer()

    gender_map = {
        "gender_all": None,
        "gender_male": "male",
        "gender_female": "female"
    }
    context.user_data['gender_filter'] = gender_map[query.data]

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–∑—Ä–∞—Å—Ç—É
    keyboard = [
        [InlineKeyboardButton("üë∂ –í—Å–µ–º –≤–æ–∑—Ä–∞—Å—Ç–∞–º", callback_data="age_all")],
        [InlineKeyboardButton("üéØ –£–∫–∞–∑–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", callback_data="age_custom")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(
        "–®–∞–≥ 8: –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É:",
        reply_markup=reply_markup
    )
    return BROADCAST_AGE_MIN


async def broadcast_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    query = update.callback_query
    await query.answer()

    if query.data == "age_all":
        context.user_data['age_min'] = None
        context.user_data['age_max'] = None
        await save_broadcast(update, context)
        return ConversationHandler.END
    else:
        await query.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18)\n"
            "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ 0, –µ—Å–ª–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:"
        )
        return BROADCAST_AGE_MIN


async def broadcast_age_min(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age_min = int(update.message.text)
        if age_min < 0:
            raise ValueError

        context.user_data['age_min'] = age_min if age_min > 0 else None

        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 45)\n"
            "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ 0, –µ—Å–ª–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:"
        )
        return BROADCAST_AGE_MAX

    except ValueError:
        await update.message.reply_text(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–æ—Ç 0)"
        )
        return BROADCAST_AGE_MIN


async def broadcast_age_max(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age_max = int(update.message.text)
        if age_max < 0:
            raise ValueError

        context.user_data['age_max'] = age_max if age_max > 0 else None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏
        age_min = context.user_data.get('age_min')
        if age_min and age_max and age_max < age_min:
            await update.message.reply_text(
                "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ!\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return BROADCAST_AGE_MAX

        await save_broadcast(update, context)
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–æ—Ç 0)"
        )
        return BROADCAST_AGE_MAX


async def save_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∑–∞–ø—É—Å–∫"""
    try:
        broadcast_id = db.create_broadcast(
            title=context.user_data['broadcast_title'],
            message_text=context.user_data['broadcast_text'],
            target_chats=context.user_data['selected_chats'],
            scheduled_time=context.user_data['scheduled_time'],
            frequency=context.user_data['frequency'],
            repeat_count=context.user_data.get('repeat_count', 1),
            gender_filter=context.user_data.get('gender_filter'),
            age_min=context.user_data.get('age_min'),
            age_max=context.user_data.get('age_max')
        )

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        scheduler.schedule_broadcast(broadcast_id)

        freq_text = {
            "once": "–æ–¥–∏–Ω —Ä–∞–∑",
            "hourly": "–∫–∞–∂–¥—ã–π —á–∞—Å",
            "daily": "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
            "weekly": "–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é"
        }

        gender_text = {
            None: "–≤—Å–µ–º",
            "male": "–º—É–∂—á–∏–Ω–∞–º",
            "female": "–∂–µ–Ω—â–∏–Ω–∞–º"
        }

        text = (
            "‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {context.user_data['broadcast_title']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {context.user_data['scheduled_time'].strftime('%d.%m.%Y %H:%M')}\n"
            f"üîÑ –ß–∞—Å—Ç–æ—Ç–∞: {freq_text[context.user_data['frequency']]}\n"
            f"üéØ –ß–∞—Ç–æ–≤: {len(context.user_data['selected_chats'])}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
        gender_filter = context.user_data.get('gender_filter')
        age_min = context.user_data.get('age_min')
        age_max = context.user_data.get('age_max')

        if gender_filter or age_min or age_max:
            text += f"üë• –§–∏–ª—å—Ç—Ä: {gender_text.get(gender_filter, '–≤—Å–µ–º')}"
            if age_min or age_max:
                age_range = f", –≤–æ–∑—Ä–∞—Å—Ç "
                if age_min and age_max:
                    age_range += f"{age_min}-{age_max}"
                elif age_min:
                    age_range += f"–æ—Ç {age_min}"
                elif age_max:
                    age_range += f"–¥–æ {age_max}"
                text += age_range
            text += "\n"

        text += f"üî¢ ID: {broadcast_id}"

        if update.callback_query:
            await update.callback_query.message.reply_text(text, parse_mode="HTML")
        else:
            await update.message.reply_text(text, parse_mode="HTML")

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()

    except Exception as e:
        logger.error(f"Error saving broadcast: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        if update.callback_query:
            await update.callback_query.message.reply_text(error_text)
        else:
            await update.message.reply_text(error_text)


# === –°–ü–ò–°–û–ö –†–ê–°–°–´–õ–û–ö ===
async def list_broadcasts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫"""
    query = update.callback_query
    await query.answer()

    broadcasts = db.get_broadcasts()

    if not broadcasts:
        await query.message.reply_text(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —á–µ—Ä–µ–∑ –º–µ–Ω—é!"
        )
        await show_main_menu(update, context)
        return

    text = "üìã <b>–í–∞—à–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
    keyboard = []

    for bc in broadcasts:
        status_emoji = {
            "pending": "‚è≥",
            "active": "‚úÖ",
            "completed": "‚úîÔ∏è",
            "failed": "‚ùå"
        }
        emoji = status_emoji.get(bc['status'], "‚ùì")

        text += (
            f"{emoji} <b>{bc['title']}</b>\n"
            f"   ID: {bc['id']} | {bc['status']}\n"
            f"   {bc['scheduled_time']}\n\n"
        )

        keyboard.append([
            InlineKeyboardButton(
                f"{emoji} {bc['title'][:20]}...",
                callback_data=f"view_broadcast_{bc['id']}"
            )
        ])

    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")


async def view_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()

    broadcast_id = int(query.data.replace("view_broadcast_", ""))
    broadcast = db.get_broadcast(broadcast_id)

    if not broadcast:
        await query.message.reply_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    stats = db.get_broadcast_stats(broadcast_id)

    text = (
        f"üìä <b>–†–∞—Å—Å—ã–ª–∫–∞: {broadcast['title']}</b>\n\n"
        f"üÜî ID: {broadcast['id']}\n"
        f"üìÖ –í—Ä–µ–º—è: {broadcast['scheduled_time']}\n"
        f"üîÑ –ß–∞—Å—Ç–æ—Ç–∞: {broadcast['frequency']}\n"
        f"üéØ –ß–∞—Ç–æ–≤: {len(broadcast['target_chats'])}\n"
        f"üìà –°—Ç–∞—Ç—É—Å: {broadcast['status']}\n"
        f"üî¢ –ü–æ–≤—Ç–æ—Ä–æ–≤: {broadcast['current_repeat']}/{broadcast['repeat_count']}\n\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['total_sent']}\n"
        f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {stats['delivered']}\n"
        f"üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {stats['total_views']}\n"
        f"üñ± –ö–ª–∏–∫–æ–≤: {stats['total_clicks']}\n\n"
        f"üí¨ <b>–¢–µ–∫—Å—Ç:</b>\n{broadcast['message_text']}"
    )

    keyboard = [
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_broadcast_{broadcast_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_broadcasts")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")


async def delete_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()

    broadcast_id = int(query.data.replace("delete_broadcast_", ""))

    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    scheduler.cancel_broadcast(broadcast_id)

    # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
    db.delete_broadcast(broadcast_id)

    await query.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
    await list_broadcasts(update, context)


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ê–¢–ê–ú–ò ===
async def manage_chats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã–º–∏ —á–∞—Ç–∞–º–∏"""
    query = update.callback_query
    await query.answer()

    chats = db.get_target_chats(active_only=False)

    keyboard = []
    text = "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏</b>\n\n"

    if chats:
        text += "–í–∞—à–∏ —á–∞—Ç—ã:\n\n"
        for chat in chats:
            status = "‚úÖ" if chat['is_active'] else "‚ùå"
            text += f"{status} {chat['chat_name']} ({chat['chat_id']})\n"
            keyboard.append([
                InlineKeyboardButton(
                    f"{status} {chat['chat_name'][:25]}",
                    callback_data=f"edit_chat_{chat['chat_id']}"
                )
            ])
    else:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.\n"

    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç", callback_data="add_chat")])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")


async def add_chat_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞"""
    query = update.callback_query
    await query.answer()

    await query.message.reply_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞</b>\n\n"
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª:\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ –≤–∞—à —á–∞—Ç/–∫–∞–Ω–∞–ª\n"
        "2. –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (—Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π)\n"
        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ ID —á–∞—Ç–∞\n\n"
        "ID —á–∞—Ç–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ @RawDataBot\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890):",
        parse_mode="HTML"
    )
    return ADD_CHAT_ID


async def add_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞"""
    chat_id = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    if not (chat_id.startswith("-") or chat_id.isdigit()):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞.\n"
            "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890)"
        )
        return ADD_CHAT_ID

    context.user_data['new_chat_id'] = chat_id

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞\n"
        "(–¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞):"
    )
    return ADD_CHAT_NAME


async def add_chat_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞"""
    chat_name = update.message.text
    chat_id = context.user_data['new_chat_id']

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        test_msg = await context.bot.send_message(
            chat_id=chat_id,
            text="‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —ç—Ç–æ–º—É —á–∞—Ç—É!"
        )
        await test_msg.delete()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
        db.add_target_chat(chat_id, chat_name, "unknown")

        await update.message.reply_text(
            f"‚úÖ –ß–∞—Ç '{chat_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"ID: {chat_id}"
        )

    except Exception as e:
        logger.error(f"Error adding chat {chat_id}: {e}")
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç.\n"
            f"–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n"
            f"1. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç\n"
            f"2. –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
            f"3. ID —á–∞—Ç–∞ —É–∫–∞–∑–∞–Ω –≤–µ—Ä–Ω–æ\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )

    context.user_data.clear()
    return ConversationHandler.END


async def edit_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞"""
    query = update.callback_query
    await query.answer()

    chat_id = query.data.replace("edit_chat_", "")

    keyboard = [
        [InlineKeyboardButton("üîÑ –í–∫–ª/–í—ã–∫–ª", callback_data=f"toggle_{chat_id}")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"remove_{chat_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_chats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞\nID: {chat_id}",
        reply_markup=reply_markup
    )


async def toggle_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Ç–∞"""
    query = update.callback_query
    await query.answer()

    chat_id = query.data.replace("toggle_", "")
    db.toggle_target_chat(chat_id)

    await query.answer("‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω")
    await manage_chats(update, context)


async def remove_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞"""
    query = update.callback_query
    await query.answer()

    chat_id = query.data.replace("remove_", "")
    db.remove_target_chat(chat_id)

    await query.answer("‚úÖ –ß–∞—Ç —É–¥–∞–ª–µ–Ω")
    await manage_chats(update, context)


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò ===
@owner_only
async def manage_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    query = update.callback_query
    await query.answer()

    admins = db.get_admins()

    keyboard = []
    text = "üë®‚Äçüíº <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n"

    if admins:
        text += "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
        for admin in admins:
            username_display = f"@{admin['username']}" if admin['username'] else "–ù–µ—Ç username"
            role_emoji = "üëë" if admin['role'] == 'owner' else "üë§"
            role_text = "–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if admin['role'] == 'owner' else "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"

            text += f"{role_emoji} <b>{role_text}</b>\n"
            text += f"   ID: <code>{admin['user_id']}</code>\n"
            text += f"   {username_display}\n"
            text += f"   –î–æ–±–∞–≤–ª–µ–Ω: {admin['added_at'][:10]}\n"

            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ owner)
            if admin['role'] != 'owner':
                keyboard.append([
                    InlineKeyboardButton(
                        f"üóë –£–¥–∞–ª–∏—Ç—å {username_display}",
                        callback_data=f"remove_admin_{admin['user_id']}"
                    )
                ])
            text += "\n"
    else:
        text += "–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.\n"

    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="add_admin")])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")


@owner_only
async def add_admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    query = update.callback_query
    await query.answer()

    await query.message.reply_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
        "1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É @userinfobot\n"
        "2. –û–Ω –ø–æ–ª—É—á–∏—Ç —Å–≤–æ–π Telegram ID\n"
        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —ç—Ç–æ—Ç ID\n\n"
        "‚ö†Ô∏è <i>–ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±—É–¥–µ—Ç –∏–º–µ—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞.\n"
        "–û–Ω —Å–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏, –Ω–æ –Ω–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.</i>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        parse_mode="HTML"
    )
    return ADD_ADMIN_ID


async def add_admin_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        admin_id = int(update.message.text.strip())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–∫–æ–π –∞–¥–º–∏–Ω –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
        if db.is_admin(admin_id):
            await update.message.reply_text(
                "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!"
            )
            return ConversationHandler.END

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if db.add_admin(admin_id):
            await update.message.reply_text(
                f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                f"ID: <code>{admin_id}</code>\n\n"
                f"–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º.",
                parse_mode="HTML"
            )
            logger.info(f"New admin added: {admin_id} by {update.effective_user.id}")
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.\n"
            "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789)\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return ADD_ADMIN_ID

    return ConversationHandler.END


@owner_only
async def remove_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    query = update.callback_query
    await query.answer()

    admin_id = int(query.data.replace("remove_admin_", ""))

    # –ó–∞—â–∏—Ç–∞ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è owner
    if admin_id == config.FIRST_ADMIN_ID:
        await query.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if db.remove_admin(admin_id):
        await query.answer("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω")
        logger.info(f"Admin removed: {admin_id} by {update.effective_user.id}")
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    await manage_admins(update, context)


# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    query = update.callback_query
    await query.answer()

    broadcasts = db.get_broadcasts()
    total_sent = 0
    total_delivered = 0
    total_clicks = 0

    for bc in broadcasts:
        stats = db.get_broadcast_stats(bc['id'])
        total_sent += stats['total_sent']
        total_delivered += stats['delivered']
        total_clicks += stats['total_clicks']

    text = (
        "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üìã –í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {len(broadcasts)}\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_sent}\n"
        f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {total_delivered}\n"
        f"üñ± –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {total_clicks}\n"
    )

    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")


# === –ü–û–ú–û–©–¨ ===
async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
    query = update.callback_query
    if query:
        await query.answer()

    text = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n\n"
        "üì§ <b>–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É</b>\n"
        "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≤–∞—à–∏–º —á–∞—Ç–∞–º –∏ –∫–∞–Ω–∞–ª–∞–º.\n\n"
        "üìã <b>–ú–æ–∏ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n"
        "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\n"
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏</b>\n"
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã–º–∏ —á–∞—Ç–∞–º–∏.\n\n"
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
        "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Ä–∞—Å—Å—ã–ª–∫–∞–º.\n\n"
        "<b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç:</b>\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à —á–∞—Ç/–∫–∞–Ω–∞–ª\n"
        "2. –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ ID —á–∞—Ç–∞ —á–µ—Ä–µ–∑ @RawDataBot\n"
        "4. –î–æ–±–∞–≤—å—Ç–µ ID —á–µ—Ä–µ–∑ –º–µ–Ω—é '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏'\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–º–æ—â—å"
    )

    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if query:
        await query.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="HTML")


# === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
async def register_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    chat_id = str(update.effective_chat.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
    user = db.get_user(user_id, chat_id)

    if user and user.get('gender') and user.get('age'):
        await update.message.reply_text(
            f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
            f"–ü–æ–ª: {'üë® –ú—É–∂—Å–∫–æ–π' if user['gender'] == 'male' else 'üë© –ñ–µ–Ω—Å–∫–∏–π'}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {user['age']} –ª–µ—Ç\n\n"
            f"–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ."
        )
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    db.add_or_update_user(
        user_id=user_id,
        chat_id=chat_id,
        username=update.effective_user.username,
        first_name=update.effective_user.first_name
    )

    keyboard = [
        [InlineKeyboardButton("üë® –ú—É–∂—Å–∫–æ–π", callback_data="reg_gender_male")],
        [InlineKeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="reg_gender_female")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ:\n\n"
        "–í–∞—à –ø–æ–ª:",
        reply_markup=reply_markup
    )

    return REGISTER_GENDER


async def register_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    query = update.callback_query
    await query.answer()

    gender = "male" if query.data == "reg_gender_male" else "female"
    context.user_data['register_gender'] = gender

    await query.message.reply_text(
        f"‚úÖ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if gender == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n\n"
        f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25):"
    )

    return REGISTER_AGE


async def register_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(update.message.text)
        if age < 10 or age > 100:
            raise ValueError

        user_id = update.effective_user.id
        chat_id = str(update.effective_chat.id)
        gender = context.user_data.get('register_gender')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        db.add_or_update_user(
            user_id=user_id,
            chat_id=chat_id,
            username=update.effective_user.username,
            first_name=update.effective_user.first_name,
            gender=gender,
            age=age
        )

        await update.message.reply_text(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–ü–æ–ª: {'üë® –ú—É–∂—Å–∫–æ–π' if gender == 'male' else 'üë© –ñ–µ–Ω—Å–∫–∏–π'}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é!"
        )

        context.user_data.clear()
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 10 –¥–æ 100):"
        )
        return REGISTER_AGE


async def view_user_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    query = update.callback_query
    if query:
        await query.answer()

    stats = db.get_user_stats()

    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['total']}\n"
        f"üë® –ú—É–∂—á–∏–Ω: {stats['male']}\n"
        f"üë© –ñ–µ–Ω—â–∏–Ω: {stats['female']}\n"
        f"‚ùì –ë–µ–∑ –¥–∞–Ω–Ω—ã—Ö: {stats['unknown']}\n"
    )

    if stats['avg_age']:
        text += f"üìà –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {stats['avg_age']} –ª–µ—Ç\n"

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç–∞–º
    chats = db.get_target_chats()
    if chats:
        text += "\n<b>–ü–æ —á–∞—Ç–∞–º:</b>\n"
        for chat in chats:
            chat_stats = db.get_user_stats(chat['chat_id'])
            text += f"\nüìç {chat['chat_name']}: {chat_stats['total']} —á–µ–ª."

    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if query:
        await query.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="HTML")


async def new_chat_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —á–∞—Ç–µ"""
    for member in update.message.new_chat_members:
        if member.id != context.bot.id:  # –ù–µ —Å–∞–º –±–æ—Ç
            user_id = member.id
            chat_id = str(update.effective_chat.id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            db.add_or_update_user(
                user_id=user_id,
                chat_id=chat_id,
                username=member.username,
                first_name=member.first_name
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=(
                        f"üëã –ü—Ä–∏–≤–µ—Ç, {member.first_name}!\n\n"
                        f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —á–∞—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫.\n\n"
                        f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏, "
                        f"–ø—Ä–æ–π–¥–∏—Ç–µ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n"
                        f"/register"
                    )
                )
            except Exception as e:
                logger.warning(f"Could not send registration message to user {user_id}: {e}")


# === –û–¢–ú–ï–ù–ê ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    context.user_data.clear()
    return ConversationHandler.END


# === CALLBACK HANDLERS ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query

    if query.data == "main_menu":
        await show_main_menu(update, context)
    elif query.data == "create_broadcast":
        await create_broadcast_start(update, context)
    elif query.data == "list_broadcasts":
        await list_broadcasts(update, context)
    elif query.data == "manage_chats":
        await manage_chats(update, context)
    elif query.data == "manage_admins":
        await manage_admins(update, context)
    elif query.data == "add_admin":
        return await add_admin_start(update, context)
    elif query.data.startswith("remove_admin_"):
        await remove_admin(update, context)
    elif query.data == "statistics":
        await show_statistics(update, context)
    elif query.data == "user_stats":
        await view_user_stats(update, context)
    elif query.data == "help":
        await show_help(update, context)
    elif query.data.startswith("view_broadcast_"):
        await view_broadcast(update, context)
    elif query.data.startswith("delete_broadcast_"):
        await delete_broadcast(update, context)
    elif query.data.startswith("edit_chat_"):
        await edit_chat(update, context)
    elif query.data.startswith("toggle_") and not query.data.startswith("toggle_chat_"):
        await toggle_chat(update, context)
    elif query.data.startswith("remove_"):
        await remove_chat(update, context)
    elif query.data == "add_chat":
        await add_chat_start(update, context)


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global scheduler

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not config.BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        return

    if not config.FIRST_ADMIN_ID:
        logger.error("FIRST_ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(config.BOT_TOKEN).build()

    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = BroadcastScheduler(application.bot, db)
    scheduler.start()

    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ (ConversationHandler)
    broadcast_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(create_broadcast_start, pattern="^create_broadcast$")],
        states={
            BROADCAST_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_title)],
            BROADCAST_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_text)],
            BROADCAST_CHATS: [
                CallbackQueryHandler(toggle_chat_selection, pattern="^toggle_chat_"),
                CallbackQueryHandler(chats_selected, pattern="^chats_selected$")
            ],
            BROADCAST_TIME: [
                CallbackQueryHandler(broadcast_time, pattern="^time_"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_time_custom)
            ],
            BROADCAST_FREQUENCY: [CallbackQueryHandler(broadcast_frequency, pattern="^freq_")],
            BROADCAST_REPEAT: [MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_repeat)],
            BROADCAST_GENDER: [CallbackQueryHandler(broadcast_gender, pattern="^gender_")],
            BROADCAST_AGE_MIN: [
                CallbackQueryHandler(broadcast_age, pattern="^age_"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_age_min)
            ],
            BROADCAST_AGE_MAX: [MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_age_max)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ (ConversationHandler)
    add_chat_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_chat_start, pattern="^add_chat$")],
        states={
            ADD_CHAT_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_chat_id)],
            ADD_CHAT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_chat_name)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ConversationHandler)
    register_conv = ConversationHandler(
        entry_points=[CommandHandler("register", register_start)],
        states={
            REGISTER_GENDER: [CallbackQueryHandler(register_gender, pattern="^reg_gender_")],
            REGISTER_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_age)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (ConversationHandler)
    add_admin_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_admin_start, pattern="^add_admin$")],
        states={
            ADD_ADMIN_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_admin_id)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", show_help))
    application.add_handler(CommandHandler("register", register_start))

    # ConversationHandlers
    application.add_handler(broadcast_conv)
    application.add_handler(add_chat_conv)
    application.add_handler(register_conv)
    application.add_handler(add_admin_conv)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, new_chat_member))

    # Callback handlers
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    async def setup_commands(app):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        commands = [
            BotCommand("start", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand("register", "üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"),
            BotCommand("help", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
            BotCommand("cancel", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        ]
        await app.bot.set_my_commands(commands)
        logger.info("Menu commands set up")

    application.post_init = setup_commands

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
